# 4.1 列表

# 4.1.1 列表的表达
# 序列类型：内部元素有位置关系，能通过位置序号访问其中元素
# 列表是一个可以使用多种类型元素，支持元素的增删改查操作的序列类型
ls = ["Python", 1989, True, {"version": 3.7}]
# 另一种产生方式：list(可迭代对象)-----字符串、元组、集合、range()等
# 字符串转列表
list("人工智能是未来的趋势")
# 元组转列表
list(("我"， "们"， "很"， "像"))
# 集合转列表
list({"李雷", "韩梅梅", "Jim", "Green"})
# 特殊的range(起始数字,中止数字,数字间隔)
for i in [0, 1, 2, 3, 4, 5]:
    print(i)
for i in range(6):
    print(i)
# 起始数字缺省为0，必须包含中止数字，数字间隔缺省为1
for i in range(1, 11, 2):
    print(i)   # 1 3 5 7 9
# range()转列表
list(range(1, 11, 2))  # [1, 3, 5, 7, 9]

# 4.1.2 列表的性质
# 列表的长度-len(list)
# 列表的索引 -  变量名[位置编号]   正向索引0开始  反向索引-1开始  
# 列表切片   -  变量名[开始位置：结束位置：切片间隔]

# 4.1.3 列表的操作符
# 用list1+list2形式实现列表拼接
a = [1, 2]
b = [3, 4]
a+b            # 该用法用的不多
# 用 n*list 或 list*n 实现列表的成倍复制
[0]*10   # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# 4.1.4 列表的操作方法
# 【1】增加元素
# 在末尾增加元素-列表.append(待增元素)
languages = ["Python", "C++", "R"]
languages.append("Java")   # ['Python', 'C++', 'R', 'Java']
# 在任意位置插入元素-列表.insert(位置编号，待增元素)
# 其位置编号相应元素前插入待增元素
languages.insert(1, "C")   # ['Python', 'C', 'C++', 'R', 'Java']
# 在末尾整体并入另一列表-列表1.extend(列表2)
# append 将列表2整体作为一个元素添加到列表1中
languages.append(["Ruby", "PHP"])  # ['Python', 'C', 'C++', 'R', 'Java', ['Ruby', 'PHP']]
# extend 将列表2内的元素逐个添加到列表1中
languages.extend(["Ruby","PHP"])   # ['Python', 'C', 'C++', 'R', 'Java', 'Ruby', 'PHP']
# 【2】删除元素
# 删除列表i位置的元素   列表.pop(位置)
languages = ['Python', 'C', 'C++', 'R', 'Java']
languages.pop(1)   # ['Python', 'C++', 'R', 'Java']
# 不写位置信息，默认删除最后一个元素
languages.pop()
# 删除列表之间中的第一次出现的待删元素-列表.remove(待删元素)
languages = ['Python', 'C', 'R', 'C', 'Java']
languages.remove("C")   # ['Python', 'R', 'C', 'Java']
while "C" in languages:
    languages.remove("C")    # ['Python', 'R', 'Java']
# 【3】查找元素
# 列表中第一次出现待查元素的位置-列表.index(待查元素)
languages = ['Python', 'C', 'R','Java']
idx = languages.index("R")   # 2
# 【4】修改元素
# 通过“先索引后赋值”的方式，对元素进行修改-列表名[位置]=新值
languages = ['Python', 'C', 'R','Java']
languages[1] = "C++"
# 【5】列表的复制
# 1.浅拷贝   列表.copy()
languages = ['Python', 'C', 'R','Java']
languages_2 = languages.copy()  
languages.pop()     
print(languages)    # ['Python', 'C', 'R']
print(languages_2)  # ['Python', 'C', 'R', 'Java']
# 2.列表[:]
languages = ['Python', 'C', 'R','Java']
languages_3 = languages[:]
languages.pop()
print(languages)    # ['Python', 'C', 'R']
print(languages_3)  # ['Python', 'C', 'R', 'Java']
# 【6】列表的排序
# 使用列表.sort()对列表进行永久排序
# 直接在列表上进行操作，无返回值
ls = [2, 5, 2, 8, 19, 3, 7]
ls.sort()  # [2, 2, 3, 5, 7, 8, 19]
# 递减
ls.sort(reverse = True)   # [19, 8, 7, 5, 3, 2, 2]
# 使用sorted(列表)对列表进行临时排序
# 原列表保持不变，返回排序后的列表
ls = [2, 5, 2, 8, 19, 3, 7]
ls_2 = sorted(ls)
print(ls)    # [2, 5, 2, 8, 19, 3, 7]
print(ls_2)  # [19, 8, 7, 5, 3, 2, 2]
sorted(ls, reverse = True)  # [19, 8, 7, 5, 3, 2, 2]
# 【7】列表的翻转
# 使用列表.reverse()对列表进行永久翻转
# 直接在列表上进行操作，无返回值
ls = [1, 2, 3, 4, 5]
print(ls[::-1])  # [5, 4, 3, 2, 1]
# 【8】使用for循环对列表进行遍历
ls = [1, 2, 3, 4, 5]
for i in ls:
    print(i)

# 4.2 元组

# 4.2.1 元组的表达



































